name: Comprehensive Application Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'

env:
  NODE_VERSION: '18'
  DATABASE_URL: 'file:./test.db'
  JWT_SECRET: 'test-jwt-secret-key-for-ci'
  CORS_ORIGIN: 'http://localhost:5173'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Unit & Integration Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Setup test database
        working-directory: ./backend
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: Run backend health check
        working-directory: ./backend
        run: |
          npm start &
          SERVER_PID=$!
          sleep 10
          curl -f http://localhost:3001/health || exit 1
          kill $SERVER_PID
          
      - name: Run Jest unit tests
        working-directory: ./backend
        run: npm test -- --coverage --watchAll=false
        
      - name: Run integration tests
        working-directory: ./backend
        run: npm test -- --testPathPattern=integration --watchAll=false
        
      - name: Upload backend test coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/
          retention-days: 7

  frontend-build:
    runs-on: ubuntu-latest
    name: Frontend Build & Unit Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  e2e-tests:
    runs-on: ubuntu-latest
    name: Cypress E2E Tests
    needs: [backend-tests, frontend-build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
            
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Setup test database
        working-directory: ./backend
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          echo $! > backend.pid
        env:
          NODE_ENV: test
          PORT: 3001
          
      - name: Wait for backend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          
      - name: Start frontend development server
        working-directory: ./frontend
        run: |
          npm run dev &
          echo $! > frontend.pid
        env:
          VITE_API_URL: http://localhost:3001
          
      - name: Wait for frontend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'
          
      - name: Run Cypress E2E tests
        working-directory: ./frontend
        run: npx cypress run --config video=true,screenshotOnRunFailure=true
        env:
          CYPRESS_baseUrl: http://localhost:5173
          CYPRESS_apiUrl: http://localhost:3001
          
      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots/
          retention-days: 7
          
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos/
          retention-days: 7
          
      - name: Stop servers
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi
          if [ -f frontend/frontend.pid ]; then
            kill $(cat frontend/frontend.pid) || true
          fi

  test-results:
    runs-on: ubuntu-latest
    name: Test Results Summary
    needs: [backend-tests, frontend-build, e2e-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Build: ${{ needs.frontend-build.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          
          if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.frontend-build.result }}" != "success" ]]; then
            echo "❌ Frontend build failed"
            exit 1
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          
          echo "✅ All tests passed successfully!"

  # Separate job for Epic 1 Story 1 specific tests
  epic1-story1-validation:
    runs-on: ubuntu-latest
    name: Epic 1 Story 1 - Story Validation
    needs: [test-results]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Setup test database
        working-directory: ./backend
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: Run Epic 1 Story 1 specific tests
        working-directory: ./backend
        run: |
          npm test -- --testPathPattern="api/user-workflow" --watchAll=false --verbose
          
      - name: Validate Application Features
        run: |
          echo "✅ Authentication: User registration and login"
          echo "✅ Authorization: JWT token-based security"
          echo "✅ Prompt Management: CRUD operations for prompts"
          echo "✅ Variable System: Multiple variable types (text, number, boolean, select)"
          echo "✅ Template Engine: Variable substitution and preview"
          echo "✅ Data Validation: Input validation and error handling"
          echo "✅ User Isolation: Secure data separation between users"
          echo "✅ Search & Pagination: Efficient data retrieval"
          echo "✅ Version Control: Prompt versioning system"
          echo "✅ API Security: Protected endpoints and middleware"