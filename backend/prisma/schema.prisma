// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and ownership
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  prompts        Prompt[]
  workflows      Workflow[]
  folders        Folder[]
  promptVersions PromptVersion[]
  promptBranches PromptBranch[]

  @@map("users")
}

// Folder model for organizing prompts hierarchically
model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Optional color for visual organization
  sortOrder   Int      @default(0) // Order within parent folder
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Self-referencing for folder hierarchy
  parentId String?
  parent   Folder? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderHierarchy")

  // Relations
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts Prompt[]
  workflows Workflow[]

  @@map("folders")
}

// Prompt model for structured prompts with variables
model Prompt {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String   // The actual prompt template
  variables   Json     // Array of variable definitions
  metadata    Json?    // Additional metadata (tags, categories, etc.)
  version     String   @default("1.0.0") // Current semantic version
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId       String?
  folder         Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)
  executions     PromptExecution[]
  workflowSteps  WorkflowStep[]
  versions       PromptVersion[]
  branches       PromptBranch[]
  
  // Current version tracking
  currentVersionId String? @unique
  currentVersion   PromptVersion? @relation("CurrentVersion", fields: [currentVersionId], references: [id])

  @@map("prompts")
}

// Workflow model for chaining prompts with comprehensive metadata
model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     String   @default("1.0.0") // Semantic versioning for workflows
  isActive    Boolean  @default(true)
  isTemplate  Boolean  @default(false) // Whether this is a reusable template
  tags        Json?    // Array of tags for categorization
  metadata    Json?    // Additional metadata (colors, icons, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId String?           // Optional folder organization
  folder   Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)
  steps    WorkflowStep[]
  variables WorkflowVariable[]
  executions WorkflowExecution[]
  templates  WorkflowTemplate[] @relation("TemplateSource")
  createdFromTemplate WorkflowTemplate? @relation("TemplateInstances", fields: [templateId], references: [id])
  templateId String?

  @@map("workflows")
}

// Workflow variables for input/output definitions
model WorkflowVariable {
  id          String @id @default(cuid())
  name        String
  type        String // 'input', 'output', 'intermediate'
  dataType    String // 'string', 'number', 'boolean', 'array', 'object'
  description String?
  defaultValue Json?
  isRequired  Boolean @default(false)
  validation  Json?  // Validation rules (min, max, regex, etc.)
  
  // Relations
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_variables")
  @@unique([workflowId, name])
}

// Enhanced workflow step model with multiple step types
model WorkflowStep {
  id       String @id @default(cuid())
  name     String
  type     StepType @default(PROMPT) // Type of step
  order    Int    // Execution order
  position Json?  // UI position for visual builder {x, y}
  config   Json   // Step-specific configuration
  inputs   Json?  // Input variable mappings
  outputs  Json?  // Output variable mappings
  conditions Json? // Conditional execution rules
  retryConfig Json? // Retry configuration for failed steps
  
  // Relations
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  promptId   String?
  prompt     Prompt?   @relation(fields: [promptId], references: [id], onDelete: SetNull)
  
  // Execution tracking
  stepExecutions WorkflowStepExecution[]

  @@map("workflow_steps")
  @@unique([workflowId, order])
}

// Workflow templates for reusable workflows
model WorkflowTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?  // Template category
  difficulty  String?  // 'beginner', 'intermediate', 'advanced'
  isPublic    Boolean  @default(false)
  usageCount  Int      @default(0)
  rating      Float?   // Average user rating
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sourceWorkflowId String
  sourceWorkflow   Workflow @relation("TemplateSource", fields: [sourceWorkflowId], references: [id])
  instances        Workflow[] @relation("TemplateInstances")

  @@map("workflow_templates")
}

// Enhanced workflow execution with detailed tracking
model WorkflowExecution {
  id         String   @id @default(cuid())
  input      Json     // Initial input variables
  output     Json?    // Final output (null if not completed)
  status     ExecutionStatus @default(PENDING)
  startedAt  DateTime @default(now())
  completedAt DateTime?
  error      Json?    // Error details if failed
  metadata   Json?    // Execution metadata (duration, resource usage)
  triggerType String  @default("manual") // 'manual', 'scheduled', 'webhook'
  
  // Relations
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  stepExecutions WorkflowStepExecution[]

  @@map("workflow_executions")
}

// Individual step execution tracking
model WorkflowStepExecution {
  id          String   @id @default(cuid())
  stepOrder   Int      // Order of the step in workflow
  input       Json?    // Input to this step
  output      Json?    // Output from this step
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?     // Execution duration in milliseconds
  error       Json?    // Error details if failed
  retryCount  Int      @default(0)
  
  // Relations
  executionId String
  execution   WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  stepId      String
  step        WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@map("workflow_step_executions")
}

// Version control for prompts
model PromptVersion {
  id            String   @id @default(cuid())
  versionNumber String   // Semantic version (e.g., "1.0.0")
  majorVersion  Int      @default(1)
  minorVersion  Int      @default(0)
  patchVersion  Int      @default(0)
  
  // Content snapshot
  name          String
  description   String?
  content       String   // The prompt template at this version
  variables     Json     // Variable definitions at this version
  metadata      Json?    // Metadata at this version
  folderId      String?  // Folder assignment at this version
  
  // Version metadata
  commitMessage String?  // Optional commit message
  changeType    VersionChangeType @default(PATCH)
  changesSummary Json?   // Summary of what changed
  tags          Json?    // Version tags (e.g., "production", "experimental")
  
  // Timestamps and author
  createdAt     DateTime @default(now())
  createdBy     String   // User ID who created this version
  
  // Relations
  promptId      String
  prompt        Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  createdByUser User     @relation(fields: [createdBy], references: [id])
  
  // Parent version for tracking changes
  parentVersionId String?
  parentVersion   PromptVersion? @relation("VersionHistory", fields: [parentVersionId], references: [id])
  childVersions   PromptVersion[] @relation("VersionHistory")
  
  // Current version relations
  currentForPrompt Prompt? @relation("CurrentVersion")
  
  // Branch relations
  branchBase PromptBranch[] @relation("BranchBase")
  branchHead PromptBranch[] @relation("BranchHead")
  
  // Execution tracking
  executions PromptExecution[]

  @@map("prompt_versions")
  @@unique([promptId, versionNumber])
  @@index([promptId, createdAt])
}

// Branches for experimental prompt versions
model PromptBranch {
  id          String   @id @default(cuid())
  name        String   // Branch name (e.g., "experiment-tone", "client-specific")
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  promptId         String
  prompt           Prompt        @relation(fields: [promptId], references: [id], onDelete: Cascade)
  baseVersionId    String        // The version this branch was created from
  baseVersion      PromptVersion @relation("BranchBase", fields: [baseVersionId], references: [id])
  currentVersionId String?       // Current head version of this branch
  currentVersion   PromptVersion? @relation("BranchHead", fields: [currentVersionId], references: [id])
  
  createdBy        String
  createdByUser    User          @relation(fields: [createdBy], references: [id])

  @@map("prompt_branches")
  @@unique([promptId, name])
}

// Execution logs for prompts
model PromptExecution {
  id        String   @id @default(cuid())
  input     Json     // Input variables and values
  output    String   // Generated output
  model     String   // AI model used
  metadata  Json?    // Additional execution metadata
  createdAt DateTime @default(now())

  // Relations
  promptId String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  // Optional version tracking
  versionId String?
  version   PromptVersion? @relation(fields: [versionId], references: [id])

  @@map("prompt_executions")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum VersionChangeType {
  PATCH  // Bug fixes, minor tweaks
  MINOR  // New features, significant improvements
  MAJOR  // Breaking changes, complete rewrites
}

enum StepType {
  PROMPT      // Execute a prompt with variables
  CONDITION   // Conditional branching
  TRANSFORM   // Data transformation step
  DELAY       // Wait/delay step
  WEBHOOK     // External API call
  DECISION    // User decision point
}
