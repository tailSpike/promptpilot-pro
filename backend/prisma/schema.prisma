generator client {
  provider   = "prisma-client"
  engineType = "client"
  output     = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  password       String
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  folders        Folder[]
  promptBranches PromptBranch[]
  promptVersions PromptVersion[]
  prompts        Prompt[]
  workflows      Workflow[]
  librarySharesSent     PromptLibraryShare[] @relation("LibrarySharesSent")
  librarySharesInvited  PromptLibraryShare[] @relation("LibrarySharesInvited")
  librarySharesRevoked  PromptLibraryShare[] @relation("LibrarySharesRevoked")
  auditLogs             AuditLog[]
  promptComments        PromptComment[]
  integrationCredentials IntegrationCredential[] @relation("CredentialOwner")
  credentialsCreated    IntegrationCredential[] @relation("CredentialCreator")

  @@map("users")
}

model Folder {
  id          String     @id @default(cuid())
  name        String
  description String?
  color       String?
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parentId    String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[]   @relation("FolderHierarchy")
  prompts     Prompt[]
  workflows   Workflow[]
  shares      PromptLibraryShare[]
  promptComments PromptComment[]

  @@map("folders")
}

model Prompt {
  id               String            @id @default(cuid())
  name             String
  description      String?
  content          String
  variables        Json
  metadata         Json?
  version          String            @default("1.0.0")
  isPublic         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String
  folderId         String?
  currentVersionId String?           @unique
  branches         PromptBranch[]
  executions       PromptExecution[]
  versions         PromptVersion[]
  currentVersion   PromptVersion?    @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  folder           Folder?           @relation(fields: [folderId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowSteps    WorkflowStep[]
  comments         PromptComment[]

  @@map("prompts")
}

model Workflow {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  version             String              @default("1.0.0")
  isActive            Boolean             @default(true)
  isTemplate          Boolean             @default(false)
  tags                Json?
  metadata            Json?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  userId              String
  folderId            String?
  templateId          String?
  executions          WorkflowExecution[]
  steps               WorkflowStep[]
  templates           WorkflowTemplate[]  @relation("TemplateSource")
  triggers            WorkflowTrigger[]
  variables           WorkflowVariable[]
  createdFromTemplate WorkflowTemplate?   @relation("TemplateInstances", fields: [templateId], references: [id])
  folder              Folder?             @relation(fields: [folderId], references: [id])
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowVariable {
  id           String   @id @default(cuid())
  name         String
  type         String
  dataType     String
  description  String?
  defaultValue Json?
  isRequired   Boolean  @default(false)
  validation   Json?
  workflowId   String
  workflow     Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, name])
  @@map("workflow_variables")
}

model WorkflowStep {
  id             String                  @id @default(cuid())
  name           String
  type           StepType                @default(PROMPT)
  order          Int
  position       Json?
  config         Json
  inputs         Json?
  outputs        Json?
  conditions     Json?
  retryConfig    Json?
  workflowId     String
  promptId       String?
  stepExecutions WorkflowStepExecution[]
  prompt         Prompt?                 @relation(fields: [promptId], references: [id])
  workflow       Workflow                @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, order])
  @@map("workflow_steps")
}

model WorkflowTemplate {
  id               String     @id @default(cuid())
  name             String
  description      String?
  category         String?
  difficulty       String?
  isPublic         Boolean    @default(false)
  usageCount       Int        @default(0)
  rating           Float?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  sourceWorkflowId String
  sourceWorkflow   Workflow   @relation("TemplateSource", fields: [sourceWorkflowId], references: [id])
  instances        Workflow[] @relation("TemplateInstances")

  @@map("workflow_templates")
}

model WorkflowTrigger {
  id              String              @id @default(cuid())
  name            String
  type            TriggerType
  isActive        Boolean             @default(true)
  config          Json
  lastTriggeredAt DateTime?
  nextRunAt       DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  workflowId      String
  executions      WorkflowExecution[]
  workflow        Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_triggers")
}

model WorkflowExecution {
  id             String                  @id @default(cuid())
  input          Json
  output         Json?
  status         ExecutionStatus         @default(PENDING)
  startedAt      DateTime                @default(now())
  completedAt    DateTime?
  error          Json?
  metadata       Json?
  triggerType    String                  @default("manual")
  workflowId     String
  triggerId      String?
  trigger        WorkflowTrigger?        @relation(fields: [triggerId], references: [id])
  workflow       Workflow                @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  stepExecutions WorkflowStepExecution[]
  documents      DocumentBlob[]

  @@map("workflow_executions")
}

model WorkflowStepExecution {
  id          String            @id @default(cuid())
  stepOrder   Int
  input       Json?
  output      Json?
  status      ExecutionStatus   @default(PENDING)
  startedAt   DateTime          @default(now())
  completedAt DateTime?
  duration    Int?
  error       Json?
  retryCount  Int               @default(0)
  executionId String
  stepId      String
  step        WorkflowStep      @relation(fields: [stepId], references: [id], onDelete: Cascade)
  execution   WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("workflow_step_executions")
}

model PromptVersion {
  id               String            @id @default(cuid())
  versionNumber    String
  majorVersion     Int               @default(1)
  minorVersion     Int               @default(0)
  patchVersion     Int               @default(0)
  name             String
  description      String?
  content          String
  variables        Json
  metadata         Json?
  folderId         String?
  commitMessage    String?
  changeType       VersionChangeType @default(PATCH)
  changesSummary   Json?
  tags             Json?
  createdAt        DateTime          @default(now())
  createdBy        String
  promptId         String
  parentVersionId  String?
  branchHead       PromptBranch[]    @relation("BranchHead")
  branchBase       PromptBranch[]    @relation("BranchBase")
  executions       PromptExecution[]
  parentVersion    PromptVersion?    @relation("VersionHistory", fields: [parentVersionId], references: [id])
  childVersions    PromptVersion[]   @relation("VersionHistory")
  createdByUser    User              @relation(fields: [createdBy], references: [id])
  prompt           Prompt            @relation(fields: [promptId], references: [id], onDelete: Cascade)
  currentForPrompt Prompt?           @relation("CurrentVersion")

  @@unique([promptId, versionNumber])
  @@index([promptId, createdAt])
  @@map("prompt_versions")
}

model PromptBranch {
  id               String         @id @default(cuid())
  name             String
  description      String?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  promptId         String
  baseVersionId    String
  currentVersionId String?
  createdBy        String
  createdByUser    User           @relation(fields: [createdBy], references: [id])
  currentVersion   PromptVersion? @relation("BranchHead", fields: [currentVersionId], references: [id])
  baseVersion      PromptVersion  @relation("BranchBase", fields: [baseVersionId], references: [id])
  prompt           Prompt         @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, name])
  @@map("prompt_branches")
}

model PromptExecution {
  id        String         @id @default(cuid())
  input     Json
  output    String
  model     String
  metadata  Json?
  createdAt DateTime       @default(now())
  promptId  String
  versionId String?
  version   PromptVersion? @relation(fields: [versionId], references: [id])
  prompt    Prompt         @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@map("prompt_executions")
}

model PromptComment {
  id          String   @id @default(cuid())
  workspaceId String
  promptId    String
  libraryId   String
  authorId    String
  body        String
  createdAt   DateTime @default(now())
  deletedAt   DateTime?

  prompt  Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  library Folder @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  author  User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([promptId, createdAt])
  @@index([libraryId])
  @@index([authorId])
  @@map("prompt_comments")
}

model PromptLibraryShare {
  id            String            @id @default(cuid())
  folderId      String
  folder        Folder            @relation(fields: [folderId], references: [id], onDelete: Cascade)
  invitedUserId String
  invitedUser   User              @relation("LibrarySharesInvited", fields: [invitedUserId], references: [id], onDelete: Cascade)
  invitedById   String
  invitedBy     User              @relation("LibrarySharesSent", fields: [invitedById], references: [id], onDelete: Cascade)
  revokedById   String?
  revokedBy     User?             @relation("LibrarySharesRevoked", fields: [revokedById], references: [id])
  role          LibraryShareRole  @default(VIEWER)
  createdAt     DateTime          @default(now())
  deletedAt     DateTime?
  lastNotifiedAt DateTime?

  @@unique([folderId, invitedUserId])
  @@index([invitedUserId])
  @@index([folderId])
  @@map("prompt_library_shares")
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  actor      User     @relation(fields: [actorId], references: [id], onDelete: Cascade)
  action     String
  targetType String
  targetId   String
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([targetId])
  @@map("audit_logs")
}

model IntegrationCredential {
  id                String                        @id @default(cuid())
  provider          String
  label             String
  encryptedSecret   String
  secretFingerprint String
  status            IntegrationCredentialStatus   @default(ACTIVE)
  metadata          Json?
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt
  lastRotatedAt     DateTime?
  revokedAt         DateTime?
  ownerId           String
  createdBy         String
  owner             User                          @relation("CredentialOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  creator           User                          @relation("CredentialCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([ownerId, provider, label])
  @@index([ownerId, provider, status])
  @@map("integration_credentials")
}

enum Role {
  USER
  ADMIN
}

enum LibraryShareRole {
  OWNER
  VIEWER
}

enum TriggerType {
  MANUAL
  SCHEDULED
  WEBHOOK
  API
  EVENT
}

enum StepType {
  PROMPT
  CONDITION
  TRANSFORM
  DELAY
  WEBHOOK
  DECISION
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum VersionChangeType {
  PATCH
  MINOR
  MAJOR
}

/// Store large text documents (e.g., long model generations) off the main execution payload
model DocumentBlob {
  id           String            @id @default(cuid())
  mimeType     String            @default("text/plain")
  size         Int
  content      String            /// Stored as TEXT in SQLite; suitable for multi-MB content
  createdAt    DateTime          @default(now())
  ownerId      String
  executionId  String?
  execution    WorkflowExecution? @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([executionId])
  @@map("document_blobs")
}

enum IntegrationCredentialStatus {
  ACTIVE
  EXPIRING
  REVOKED
}
